import hashlib;
import passlib.hash;
import sys;

# Verifier does not know the age
age_actual = 14
age_to_prove = 13

# This is seed is a random value generated by a Third Party, to ensure security
seed = "1234567891011121314151617181920"

# This is a digital signature proof by Trusted Entity
proof = hashlib.sha256(seed.encode()).hexdigest()
print("Proof is " + proof)

# Proof and Encrypted have different values for distinct purposes
encrypted_age = hashlib.sha256(seed.encode()).hexdigest()
print("Encrypted Age (initialized with seed) is " + encrypted_age)
print("\n")

# If b < a, we don't loop, so we don't hash
a = 1
b = 1 + age_actual - age_to_prove
for i in range(a, b):
    proof = hashlib.sha256(proof.encode()).hexdigest()

print("New Proof is " + proof)

# Prover hashes age_actual times his age to secure it
c = 1
d = age_actual + 1
for i in range(c, d):
    encrypted_age = hashlib.sha256(encrypted_age.encode()).hexdigest()
print("New Encrypted Age is " + encrypted_age)
print("\n")

# Verified Age will be Hashed age_to_prove times
original_proof = proof
verified_age = proof
for i in range(0, age_to_prove):
    verified_age = hashlib.sha256(verified_age.encode()).hexdigest()

print("Verified Age is " + verified_age)

print("Actual Age:\t\t", age_actual)
print("Age to prove:\t\t", age_to_prove)

print("....")

print("Proof:\t\t", proof)
print("Encrypted Age:\t", encrypted_age)
print("Verified Age:\t", verified_age)
print("\n")

# We check if Encrypted Age (By Prover) and Verified_Age (By Verifier)
if (encrypted_age == verified_age):
    print("You have proven your age!")
else:
    print("You have NOT proven your age!")